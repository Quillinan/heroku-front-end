[{"C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\index.tsx":"1","C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\App.tsx":"2","C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\routes.tsx":"3","C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\components\\Header\\index.tsx":"4","C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\pages\\Produtos\\index.tsx":"5","C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\pages\\Home\\index.tsx":"6","C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\pages\\Produtos\\Form\\index.tsx":"7","C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\pages\\Produtos\\Info\\index.tsx":"8","C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\services\\api.ts":"9"},{"size":251,"mtime":1643189515804,"results":"10","hashOfConfig":"11"},{"size":299,"mtime":1643189515803,"results":"12","hashOfConfig":"11"},{"size":727,"mtime":1643189515807,"results":"13","hashOfConfig":"11"},{"size":574,"mtime":1643189515803,"results":"14","hashOfConfig":"11"},{"size":4048,"mtime":1643189515806,"results":"15","hashOfConfig":"11"},{"size":738,"mtime":1643189515804,"results":"16","hashOfConfig":"11"},{"size":2456,"mtime":1643189515805,"results":"17","hashOfConfig":"11"},{"size":1782,"mtime":1643189515805,"results":"18","hashOfConfig":"11"},{"size":124,"mtime":1643189515807,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gc5fgu",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\index.tsx",[],"C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\App.tsx",[],"C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\routes.tsx",[],"C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\components\\Header\\index.tsx",[],"C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\pages\\Produtos\\index.tsx",["40"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Table, Button } from 'react-bootstrap';\r\nimport api from '../../services/api';\r\n\r\nimport moment from 'moment';\r\n\r\ninterface IProduto {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n}\r\n\r\nconst Produtos: React.FC = () => {\r\n  const history = useHistory();\r\n  const [produtos, setProdutos] = useState<IProduto[]>([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [produtoPerPage] = useState(5);\r\n\r\n  useEffect(() => {\r\n    loadProdutos();\r\n  }, []);\r\n\r\n  // Função que carrega os produtos da api\r\n  async function loadProdutos() {\r\n    const response = await api.get('/produtos');\r\n    setProdutos(response.data);\r\n    console.log(response.data);\r\n  }\r\n\r\n  //Função que apaga os produtos da api\r\n  async function removeProduto(id: number) {\r\n    await api.delete(`/produtos/${id}`);\r\n    loadProdutos();\r\n  }\r\n\r\n  // Formatação da data\r\n  function formateDate(date: Date) {\r\n    return moment(date).format('DD/MM/YYYY');\r\n  }\r\n\r\n  // Formatação do preço\r\n  function formatePrice(price: Number) {\r\n    return price.toLocaleString('pt-br', {\r\n      style: 'currency',\r\n      currency: 'BRL',\r\n    });\r\n  }\r\n\r\n  //Função que edita os produtos da api\r\n  function editProduto(id: number) {\r\n    history.push(`/produtos_cadastro/${id}`);\r\n  }\r\n\r\n  //Função que direciona para a info do produto com id\r\n  function viewProduto(id: number) {\r\n    history.push(`/produtos/${id}`);\r\n  }\r\n\r\n  const paginate = (pageNumber: React.SetStateAction<number>) =>\r\n    setCurrentPage(pageNumber);\r\n  const indexOfLastProduto = currentPage * produtoPerPage;\r\n  const indexOfFirstProduto = indexOfLastProduto - produtoPerPage;\r\n  const currentProduto = produtos.slice(\r\n    indexOfFirstProduto,\r\n    indexOfLastProduto\r\n  );\r\n  const totalProdutos = produtos.length;\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalProdutos / produtoPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"text-center\">\r\n        <br />\r\n        <h1> Lista de produtos </h1>\r\n        <br />\r\n        <Table striped bordered hover variant=\"dark\" className=\"text-center\">\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Nome</th>\r\n              <th>Preço</th>\r\n              <th>Data de criação</th>\r\n              <th>Última atualização</th>\r\n              <th>Ações</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {currentProduto.map((produto) => (\r\n              <tr>\r\n                <td>{produto.id}</td>\r\n                <td>{produto.name}</td>\r\n                <td>{formatePrice(produto.price)}</td>\r\n                <td>{formateDate(produto.created_at)}</td>\r\n                <td>{formateDate(produto.updated_at)}</td>\r\n                <td>\r\n                  <Button\r\n                    size=\"sm\"\r\n                    onClick={() => viewProduto(produto.id)}\r\n                    variant=\"info\"\r\n                  >\r\n                    Ver\r\n                  </Button>{' '}\r\n                  <Button size=\"sm\" onClick={() => editProduto(produto.id)}>\r\n                    Editar\r\n                  </Button>{' '}\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"danger\"\r\n                    onClick={() => removeProduto(produto.id)}\r\n                  >\r\n                    Apagar\r\n                  </Button>{' '}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n        <nav>\r\n          <ul className=\"pagination\">\r\n            {pageNumbers.map((number) => (\r\n              <li key={number} className=\"page-item\">\r\n                <a onClick={() => paginate(number)} className=\"page-link\">\r\n                  {number}\r\n                </a>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Produtos;\r\n","C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\pages\\Home\\index.tsx",[],"C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\pages\\Produtos\\Form\\index.tsx",["41","42"],"import React, { useState, useEffect, ChangeEvent } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport api from '../../../services/api';\r\n\r\ninterface IProduto {\r\n  name: string;\r\n  price: number;\r\n}\r\n\r\nconst Produtos: React.FC = () => {\r\n  const history = useHistory();\r\n  let { id } = useParams<{ id: string }>();\r\n  const [model, setModel] = useState<IProduto>({\r\n    name: '',\r\n    price: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (id !== undefined) {\r\n      findProduto(id);\r\n    }\r\n  }, [id]);\r\n\r\n  // Função para edição de produto\r\n  function updatedModel(e: ChangeEvent<HTMLInputElement>) {\r\n    setModel({\r\n      ...model,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  }\r\n\r\n  // Função de volta na navegação\r\n  function back() {\r\n    history.goBack();\r\n  }\r\n\r\n  // Limpa ip do console da página\r\n  async function onSubmit(e: ChangeEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n\r\n    if (id !== undefined) {\r\n      const response = await api.put(`produtos/${id}`, model);\r\n    } else {\r\n      const response = await api.post('/produtos', model);\r\n    }\r\n    back();\r\n  }\r\n\r\n  // Função que chama todos os produtos da api\r\n  async function findProduto(id: string) {\r\n    const response = await api.get(`produtos/${id}`);\r\n    setModel({\r\n      name: response.data.name,\r\n      price: response.data.price,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"text-center\">\r\n        <br />\r\n        <h1> Cadastre o seu produtos </h1>\r\n        <br />\r\n      </div>\r\n      <div className=\"container\">\r\n        <Form onSubmit={onSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Nome</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={model.name}\r\n              onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group>\r\n            <Form.Label>Preço</Form.Label>\r\n            <Form.Control\r\n              type=\"number\"\r\n              name=\"price\"\r\n              value={model.price}\r\n              onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}\r\n            />\r\n          </Form.Group>\r\n          <br />\r\n          <Button variant=\"success\" type=\"submit\" active>\r\n            Enviar\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Produtos;\r\n","C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\pages\\Produtos\\Info\\index.tsx",[],"C:\\Users\\Milton\\Desktop\\DEPLOY\\CRUD\\React\\src\\services\\api.ts",[],{"ruleId":"43","severity":1,"message":"44","line":129,"column":17,"nodeType":"45","endLine":129,"endColumn":75},{"ruleId":"46","severity":1,"message":"47","line":43,"column":13,"nodeType":"48","messageId":"49","endLine":43,"endColumn":21},{"ruleId":"46","severity":1,"message":"47","line":45,"column":13,"nodeType":"48","messageId":"49","endLine":45,"endColumn":21},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar"]